# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Julien Brundrett
Student ID: 604345463
Email: julien.brundret@gmail.com

# Partner 2 (if you're working in a team)
Name: Vince Siu
Student ID: 
Email: 

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)

A simple process forking method was used to implement parallel downloading
and uploading. The main routine forks one child process per staged download,
such that all initial downloads proceed in parallel. Next, the main routine
listens for upload requests, then forks for each upload request. Multiple
upload requests will proceed in parallel. Once a single upload or download
request is completed, the child process will exit.

# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)



# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)

check for current dir in upload filename


# Add any other information you'd like us to know below this line.
