 # Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Julien Brundrett
Student ID: 604345463
Email: julien.brundret@gmail.com

# Partner 2 (if you're working in a team)
Name: Vincent Siu
Student ID: 904280752
Email: vince.siu4@gmail.com 

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)

A simple process forking method was used to implement parallel downloading
and uploading. The main routine forks one child process per staged download,
such that all initial downloads proceed in parallel. Next, the main routine
listens for upload requests, then forks for each upload request. Multiple
upload requests will proceed in parallel. Once a single upload or download
request is completed, the child process will exit.

# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)

A buffer overrun bug can be caused in the filename buffer. strcpy is not safe,
so if a filename longer than the filename buffer is copied, it will trigger
buffer overflow. The start_download function was modified to ensure that no
filenames passed as initial arguments are larger than the filename buffer.

The task_upload function was also modified to ensure that the filename passed
in a GET request from a peer is within buffer limits. Strcpy was used originally
in this function, so buffer overflow was possible. Checks were added to ensure
the filename passed in the GET request is within character limits prior to being
copied to the buffer.

# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)

There were no checks in place to ensure that GET requests will fail for
files outside of the working directory. The task_download function was modified
to parse through the filename and ensure no '/' characters are present, with the
exception of './' occuring as the first two characters of the filename. If any
'/' characters are present, then the peer is attempting to access a subdirectory,
which is not allowed.

In addition, we set a timeout time for socket reads, so that whenever we are
download a file, if the peer we are downloading from goes over a certain time
limit between his messages, a counter is incremented, and after a certain
amount of consecutive timeouts, then we switch to a different peer. This fixes
the problem of having a peer lose a network connection or having a slow network
connection. However, in doing so, we found an unintended PROPAGATION OF SIDE
EFFECTS: in adding this option, we discovered that the main loop would
terminate after all download requests were finished, and found that the timeout
of the socket caused it to fail the main loop while condition. We set a
preprocessor directive to add and remove this implementation easily, so you can
observe it if you wish. We decided upon keeping this implementation due to the
relevance to topics learned in class.

# Add any other information you'd like us to know below this line.
